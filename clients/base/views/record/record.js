/*********************************************************************************
     * By installing or using this file, you are confirming on behalf of the entity
     * subscribed to the SugarCRM Inc. product ("Company") that Company is bound by
     * the SugarCRM Inc. Master Subscription Agreement (“MSA”), which is viewable at:
     * http://www.sugarcrm.com/master-subscription-agreement
     *
     * If Company is not bound by the MSA, then by installing or using this file
     * you are agreeing unconditionally that Company will be bound by the MSA and
     * certifying that you have authority to bind Company accordingly.
     *
     * Copyright (C) 2004-2013 SugarCRM Inc.  All rights reserved.
     ********************************************************************************/
({inlineEditMode:false,createMode:false,plugins:['SugarLogic','ErrorDecoration','GridBuilder','Editable','Audit','FindDuplicates','ToggleMoreLess'],enableHeaderButtons:true,enableHeaderPane:true,events:{'click .record-edit-link-wrapper':'handleEdit','click a[name=cancel_button]':'cancelClicked','click [data-action=scroll]':'paginateRecord'},buttons:null,STATE:{EDIT:'edit',VIEW:'view'},currentState:null,noEditFields:null,_containerWidth:0,initialize:function(options){_.bindAll(this);options.meta=_.extend({},app.metadata.getView(null,'record'),options.meta);app.view.View.prototype.initialize.call(this,options);this.buttons={};this.createMode=this.context.get("create")?true:false;this.action='detail';this.context.on("change:record_label",this.setLabel,this);this.context.set("viewed",true);this.model.on("duplicate:before",this.setupDuplicateFields,this);this.on("editable:keydown",this.handleKeyDown,this);this.on("editable:mousedown",this.handleMouseDown,this);app.routing.before("route",this.beforeRouteDelete,this,true);$(window).on("beforeunload.delete"+this.cid,_.bind(this.warnDeleteOnRefresh,this));this.delegateButtonEvents();if(this.createMode){this.model.isNotEmpty=true;}
this.noEditFields=[];this.MORE_LESS_KEY=app.user.lastState.key(this.MORE_LESS_KEY,this);this.adjustHeaderpane=_.bind(_.debounce(this.adjustHeaderpane,50),this);$(window).on('resize.'+this.cid,this.adjustHeaderpane);},hasUnsavedChanges:function(){if(this.resavingAfterMetadataSync)
return false;var changedAttributes=this.model.changedAttributes(this.model.getSyncedAttributes());if(_.isEmpty(changedAttributes)){return false;}
var formFields=_.compact(_.pluck(this.editableFields,'name')),unsavedFields=_.intersection(_.keys(changedAttributes),formFields);return!_.isEmpty(unsavedFields);},setupDuplicateFields:function(prefill){},setLabel:function(context,value){this.$(".record-label[data-name="+value.field+"]").text(value.label);},validationComplete:function(isValid){if(isValid){this.setButtonStates(this.STATE.VIEW);this.handleSave();}},delegateButtonEvents:function(){this.context.on('button:edit_button:click',this.editClicked,this);this.context.on('button:save_button:click',this.saveClicked,this);this.context.on('button:delete_button:click',this.deleteClicked,this);this.context.on('button:duplicate_button:click',this.duplicateClicked,this);},_render:function(){this._buildGridsFromPanelsMetadata(this.meta.panels);app.view.View.prototype._render.call(this);var record_label=this.context.get("record_label");if(record_label){this.setLabel(this.context,record_label);}
_.each(this.fields,function(field){var toggleLabel=_.bind(function(){this.toggleLabelByField(field);},this);field.off('render',toggleLabel);if(field.$el.closest('.headerpane').length>0){field.on('render',toggleLabel);}
if(field.def.readonly&&field.name&&-1==_.indexOf(this.noEditFields,field.name)){this.$('.record-edit-link-wrapper[data-name='+field.name+']').remove();}},this);this.toggleHeaderLabels(this.createMode);this.initButtons();this.setButtonStates(this.STATE.VIEW);this.setEditableFields();if(this.createMode){this.toggleFields(this.editableFields,true);}},setEditableFields:function(){delete this.editableFields;this.editableFields=[];var previousField,firstField;_.each(this.fields,function(field,index){if(field.def.readonly||_.indexOf(this.noEditFields,field.def.name)>=0||field.parent||(field.name&&this.buttons[field.name])){return;}
if(previousField){previousField.nextField=field;field.prevField=previousField;}else{firstField=field;}
previousField=field;this.editableFields.push(field);},this);if(previousField){previousField.nextField=firstField;firstField.prevField=previousField;}},initButtons:function(){if(this.options.meta&&this.options.meta.buttons){_.each(this.options.meta.buttons,function(button){this.registerFieldAsButton(button.name);if(button.buttons){var dropdownButton=this.getField(button.name);if(!dropdownButton){return;}
_.each(dropdownButton.fields,function(ddButton){this.buttons[ddButton.name]=ddButton;},this);}},this);}},showPreviousNextBtnGroup:function(){var listCollection=this.context.get('listCollection')||new app.data.createBeanCollection(this.module);var recordIndex=listCollection.indexOf(listCollection.get(this.model.id));if(listCollection&&listCollection.models&&listCollection.models.length<=1){this.showPrevNextBtnGroup=false;}else{this.showPrevNextBtnGroup=true;}
if(this.collection&&listCollection.length!==0){this.showPrevious=listCollection.hasPreviousModel(this.model);this.showNext=listCollection.hasNextModel(this.model);}},registerFieldAsButton:function(buttonName){var button=this.getField(buttonName);if(button){this.buttons[buttonName]=button;}},_renderHtml:function(){this.showPreviousNextBtnGroup();app.view.View.prototype._renderHtml.call(this);this.adjustHeaderpane();},bindDataChange:function(){this.model.on("change",function(fieldType){if(this.inlineEditMode){this.setButtonStates(this.STATE.EDIT);}
if(this.model.isNotEmpty!==true&&fieldType!=='image'){this.model.isNotEmpty=true;if(!this.disposed){this.render();}}},this);},duplicateClicked:function(){var self=this,prefill=app.data.createBean(this.model.module);prefill.copy(this.model);self.model.trigger("duplicate:before",prefill);prefill.unset("id");app.drawer.open({layout:'create-actions',context:{create:true,model:prefill}},function(context,newModel){if(newModel&&newModel.id){app.router.navigate("#"+self.model.module+"/"+newModel.id,{trigger:true});}});},editClicked:function(){this.setButtonStates(this.STATE.EDIT);this.toggleEdit(true);},saveClicked:function(){this.model.doValidate(this.getFields(this.module),_.bind(this.validationComplete,this));},cancelClicked:function(){this.handleCancel();this.setButtonStates(this.STATE.VIEW);this.clearValidationErrors(this.editableFields);},deleteClicked:function(){this.warnDelete();},toggleEdit:function(isEdit){this.$('.record-edit-link-wrapper').toggle(!isEdit);this.$('.headerpane .record-label').toggle(isEdit);this.toggleFields(this.editableFields,isEdit);this.toggleViewButtons(isEdit);this.adjustHeaderpane();},handleEdit:function(e,cell){var target,cellData,field;if(e){target=this.$(e.target);cell=target.parents(".record-cell");}
cellData=cell.data();field=this.getField(cellData.name);this.inlineEditMode=true;this.setButtonStates(this.STATE.EDIT);this.toggleField(field);if(cell.closest('.headerpane').length>0){this.toggleViewButtons(true);this.adjustHeaderpaneFields();}},toggleHeaderLabels:function(isEdit){this.$('.headerpane .record-label').toggle(isEdit);this.toggleViewButtons(isEdit);this.adjustHeaderpane();},toggleViewButtons:function(isEdit){this.$('.headerpane span[data-type="badge"]').toggleClass('hide',isEdit);this.$('.headerpane span[data-type="favorite"]').toggleClass('hide',isEdit);this.$('.headerpane span[data-type="follow"]').toggleClass('hide',isEdit);this.$('.headerpane .btn-group-previous-next').toggleClass('hide',isEdit);},toggleLabelByField:function(field){if(field.action==='edit'){field.$el.closest('.record-cell').addClass('edit').find('.record-label').show();}else{field.$el.closest('.record-cell').removeClass('edit').find('.record-label').hide();}},handleSave:function(){var self=this;self.inlineEditMode=false;var options={showAlerts:true,success:_.bind(function(){_.each(this.context.children,function(child){if(!_.isUndefined(child.attributes)&&!_.isUndefined(child.attributes.isSubpanel)){if(child.attributes.isSubpanel&&!child.attributes.hidden){child.attributes.collection.fetch();}}});if(this.createMode){app.navigate(this.context,this.model);}else if(!this.disposed){this.render();}},this),error:_.bind(function(error){if(error.status==412&&!error.request.metadataRetry){this.handleMetadataSyncError(error);}
else{this.editClicked();}},this),viewed:true};options=_.extend({},options,self.getCustomSaveOptions(options));app.file.checkFileFieldsAndProcessUpload(self,{success:function(){self.model.save({},options);}},{deleteIfFails:false});self.$('.record-save-prompt').hide();if(!self.disposed){self.render();}},handleMetadataSyncError:function(error){var self=this;self.resavingAfterMetadataSync=true;app.once("app:sync:complete",function(){error.request.metadataRetry=true;self.model.once("sync",function(){self.resavingAfterMetadataSync=false;app.router.refresh();});error.request.execute(null,app.api.getMetadataHash());});},getCustomSaveOptions:function(options){return{};},handleCancel:function(){this.model.revertAttributes();this.toggleEdit(false);this.inlineEditMode=false;},beforeRouteDelete:function(){if(this._modelToDelete){this.warnDelete();return false;}
return true;},getDeleteMessages:function(){var messages={},model=this.model,name=model.get('name')||(model.get('first_name')+' '+model.get('last_name'))||'',context=app.lang.get('LBL_MODULE_NAME_SINGULAR',model.module).toLowerCase()+' '+name.trim();messages.confirmation=app.lang.get('NTC_DELETE_CONFIRMATION')+context+'?';messages.success=app.lang.get('NTC_DELETE_SUCCESS')+context+'.';return messages;},warnDelete:function(){var self=this;this._modelToDelete=true;self._targetUrl=Backbone.history.getFragment();if(self._targetUrl!==self._currentUrl){app.router.navigate(self._currentUrl,{trigger:false,replace:true});}
app.alert.show('delete_confirmation',{level:'confirmation',messages:self.getDeleteMessages().confirmation,onConfirm:_.bind(self.deleteModel,self),onCancel:function(){self._modelToDelete=false;}});},warnDeleteOnRefresh:function(){if(this._modelToDelete){return this.getDeleteMessages().confirmation;}},deleteModel:function(){var self=this;self.model.destroy({showAlerts:{'process':true,'success':{messages:self.getDeleteMessages().success}},success:function(){var redirect=self._targetUrl!==self._currentUrl;self._modelToDelete=false;self.context.trigger("record:deleted");if(redirect){self.unbindBeforeRouteDelete();app.router.navigate(self._targetUrl,{trigger:true});return;}
app.router.navigate("#"+self.module,{trigger:true});}});},handleKeyDown:function(e,field){if(e.which===9){e.preventDefault();field.$(field.fieldTag).trigger("change");var direction=e.shiftKey?'prevField':'nextField',nextField=field[direction];if(!nextField){return;}
var hasHiddenPanel=nextField.$el.closest('.panel_hidden').hasClass('hide')&&_.isFunction(this.toggleMoreLess);if(hasHiddenPanel){this.toggleMoreLess();}
this.toggleField(field,false);this.toggleField(nextField,true);if(nextField.isDisabled()){var curField=nextField;while(curField.isDisabled()){if(curField[direction]){this.toggleField(curField[direction],true);curField=curField[direction];}else{break;}}}
this.adjustHeaderpane();}},handleMouseDown:function(){this.toggleViewButtons(false);this.adjustHeaderpaneFields();},setButtonStates:function(state){this.currentState=state;_.each(this.buttons,function(field){var showOn=field.def.showOn;if(_.isUndefined(showOn)||(showOn===state)){field.show();}else{field.hide();}},this);},setTitle:function(title){var $title=this.$('.headerpane .module-title');if($title.length>0){$title.text(title);}else{this.$('.headerpane h1').prepend('<div class="record-cell"><span class="module-title">'+title+'</span></div>');}},unbindBeforeRouteDelete:function(){app.routing.offBefore("route",this.beforeRouteDelete,this);$(window).off("beforeunload.delete"+this.cid);},_dispose:function(){this.unbindBeforeRouteDelete();_.each(this.editableFields,function(field){field.nextField=null;field.prevField=null;});this.buttons=null;this.editableFields=null;this.off("editable:keydown",this.handleKeyDown,this);$(window).off('resize.'+this.cid);app.view.View.prototype._dispose.call(this);},_buildGridsFromPanelsMetadata:function(panels){var lastTabIndex=0;this.noEditFields=[];_.each(panels,function(panel){_.each(panel.fields,function(field,index){if(_.isString(field)){panel.fields[index]=field={name:field};}
if(field.type==="fieldset"){if(field.readonly||_.every(field.fields,function(field){return!app.acl.hasAccessToModel('edit',this.model,field.name);},this)){this.noEditFields.push(field.name);}}else if(field.readonly||!app.acl.hasAccessToModel('edit',this.model,field.name)){this.noEditFields.push(field.name);}},this);if(panel.hide){this.hiddenPanelExists=true;}
if(_.isUndefined(panel.labels)){panel.labels=true;}
if(_.isFunction(this.getGridBuilder)){var options={fields:panel.fields,columns:panel.columns,labels:panel.labels,labelsOnTop:panel.labelsOnTop,tabIndex:lastTabIndex},gridResults=this.getGridBuilder(options).build();panel.grid=gridResults.grid;lastTabIndex=gridResults.lastTabIndex;}},this);},paginateRecord:function(evt){var el=$(evt.currentTarget),data=el.data();if(data.id){var list=this.context.get('listCollection'),model=list.get(data.id);switch(data.actionType){case'next':list.getNext(model,this.navigateModel);break;case'prev':list.getPrev(model,this.navigateModel);break;default:this._disablePagination(el);}}},navigateModel:function(model,actionType){if(model&&model.id){app.router.navigate(app.router.buildRoute(this.module,model.id),{trigger:true});}else{var el=this.$el.find('[data-action=scroll][data-action-type='+actionType+']');this._disablePagination(el);}},_disablePagination:function(el){app.logger.error('Wrong data for record pagination. Pagination is disabled.');el.addClass('disabled');el.data('id','');},adjustHeaderpane:function(){this.setContainerWidth();this.adjustHeaderpaneFields();},getContainerWidth:function(){return this._containerWidth;},setContainerWidth:function(){this._containerWidth=this._getParentLayoutWidth(this.layout);},_getParentLayoutWidth:function(layout){if(!layout){return 0;}else if(_.isFunction(layout.getPaneWidth)){return layout.getPaneWidth(this);}
return this._getParentLayoutWidth(layout.layout);},adjustHeaderpaneFields:function(){if(!this.disposed&&!_.isEmpty($recordCells)&&this.getContainerWidth()>0){var ellipsisCellWidth,$recordCells=this.$('.headerpane h1').children('.record-cell, .btn-toolbar'),$ellipsisCell=$(this._getCellToEllipsify($recordCells));if(!_.isEmpty($ellipsisCell)){if($ellipsisCell.hasClass('edit')){$ellipsisCell.css({'width':'100%'});}else{ellipsisCellWidth=this._calculateEllipsifiedCellWidth($recordCells,$ellipsisCell);this._setMaxWidthForEllipsifiedCell($ellipsisCell,ellipsisCellWidth);this._widenLastCell($recordCells);}}}},_getCellToEllipsify:function($cells){var fieldTypesToEllipsify=['fullname','name','text','base','enum','url','dashboardtitle'];return _.find($cells,function(cell){return(_.indexOf(fieldTypesToEllipsify,$(cell).data('type'))!==-1);});},_calculateEllipsifiedCellWidth:function($cells,$ellipsisCell){var width=this.getContainerWidth();_.each($cells,function(cell){var $cell=$(cell);if($cell.is($ellipsisCell)){width-=(parseInt($ellipsisCell.css('padding-left'),10)
+parseInt($ellipsisCell.css('padding-right'),10));}else if($cell.is(':visible')){$cell.css({'width':'auto'});width-=$cell.outerWidth();}
$cell.css({'width':''});});return width;},_setMaxWidthForEllipsifiedCell:function($ellipsisCell,width){var ellipsifiedCell,fieldType=$ellipsisCell.data('type');if(fieldType==='fullname'||fieldType==='dashboardtitle'){ellipsifiedCell=this.getField($ellipsisCell.data('name'));width-=ellipsifiedCell.getCellPadding();ellipsifiedCell.setMaxWidth(width);}else{$ellipsisCell.css({'max-width':width});}},_widenLastCell:function($cells){var $cellToWiden;_.each($cells,function(cell){var $cell=$(cell);if($cell.hasClass('record-cell')&&(!$cell.hasClass('hide')||$cell.is(':visible'))){$cellToWiden=$cell;}});if($cellToWiden){$cellToWiden.css({'width':'100%'});}},getFieldNames:function(module){var fields=app.view.View.prototype.getFieldNames.call(this,module);var favorite=_.find(this.meta.panels,function(panel){return _.find(panel.fields,function(field){return field.type==='favorite';});});if(favorite){fields=_.union(fields,['my_favorite']);}
return fields;}})