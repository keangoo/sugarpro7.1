/*
     * By installing or using this file, you are confirming on behalf of the entity
     * subscribed to the SugarCRM Inc. product ('Company') that Company is bound by
     * the SugarCRM Inc. Master Subscription Agreement ('MSA'), which is viewable at:
     * http://www.sugarcrm.com/master-subscription-agreement
     *
     * If Company is not bound by the MSA, then by installing or using this file
     * you are agreeing unconditionally that Company will be bound by the MSA and
     * certifying that you have authority to bind Company accordingly.
     *
     * Copyright  2004-2013 SugarCRM Inc.  All rights reserved.
     */
({extendsFrom:'MassupdateProgressView',plugins:['editable'],_labelSet:{TITLE:'LBL_MERGE_DUPLICATES_TITLE',PROGRESS_STATUS:'TPL_MERGE_DUPLICATES_PROGRESS_STATUS',FAIL_TO_ATTEMPT:'TPL_MERGE_DUPLICATES_FAIL_TO_ATTEMPT',FAIL:'TPL_MERGE_DUPLICATES_FAIL'},processedCount:0,failsCount:0,initLabels:function(){this.LABELSET=this._labelSet;},reset:function(){this.processedCount=0;this.failsCount=0;this.totalRecord=0;},checkAvailable:function(){return true;},getEstimate:function(){return 0;},setTotalRecords:function(total){this.totalRecord=total;},getTotalRecords:function(){return this.totalRecord;},getRemainder:function(){return'';},setProgressSize:function(count){this.processedCount;},incrementProgressSize:function(){this.processedCount=this.processedCount+1;},getProgressSize:function(){return this.processedCount;},checkError:function(context){if(_.isUndefined(context)||_.isUndefined(context.attempt)){return;}
if(context.attempt===0||context.attempt>(context.maxAllowAttempt||3)){return;}
app.alert.dismiss('check_error_message');app.alert.show('check_error_message',{level:'warning',messages:app.lang.get(this.LABELSET['FAIL_TO_ATTEMPT'],this.module,{objectName:context.objectName||'',num:context.attempt,total:(context.maxAllowAttempt||3)}),autoClose:true,autoCloseDelay:8000});},_onDrawerReset:function(){this.showProgress();return false;},showProgress:function(){app.drawer.before('reset',this._onDrawerReset,this,true);this._super('showProgress');},pauseProgress:function(){var stopButton=this.getField('btn-stop');if(stopButton){stopButton.setDisabled(true);}
this.$holders.bar.removeClass('active');this.model.trigger('massupdate:pause:completed');},resumeProgress:function(){var stopButton=this.getField('btn-stop');if(stopButton){stopButton.setDisabled(false);}
this.model.trigger('massupdate:resume:completed');},stopProgress:function(){this.model.trigger('massupdate:stop:completed');},hideProgress:function(){app.drawer.offBefore('reset',this._onDrawerReset,this);this.hide();app.alert.dismiss('stop_confirmation');app.alert.dismiss('check_error_message');this.model.trigger('massupdate:end:completed');},onItemProcessed:function(){this.incrementProgressSize();this.updateProgress();this.model.trigger('massupdate:item:processed:completed');},onNextAttept:function(context){this.checkError(context);this.model.trigger('massupdate:item:attempt:completed');},onItemFail:function(context){this.failsCount=this.failsCount+1;this.$holders.bar.removeClass('progress-info').addClass('progress-danger');app.alert.dismiss('fail_message');app.alert.show('fail_message',{level:'error',messages:app.lang.get(this.LABELSET['FAIL'],this.module,{objectName:context.objectName||''}),autoClose:true,autoCloseDelay:8000});this.model.trigger('massupdate:item:fail:completed');},bindDataChange:function(){if(!this.model){return;}
this.on('render',this.initHolders,this);this.before('start',this.checkAvailable,this,true);this.model.on('massupdate:always',this.updateProgress,this);this.model.on('massupdate:start',this.showProgress,this);this.model.on('massupdate:end',this.hideProgress,this);this.model.on('massupdate:fail',this.checkError,this);this.model.on('massupdate:resume',this.resumeProgress,this);this.model.on('massupdate:pause',this.pauseProgress,this);this.model.on('massupdate:stop',this.stopProgress,this);this.model.on('massupdate:item:processed',this.onItemProcessed,this);this.model.on('massupdate:item:attempt',this.onNextAttept,this);this.model.on('massupdate:item:fail',this.onItemFail,this);}})