/*
     * By installing or using this file, you are confirming on behalf of the entity
     * subscribed to the SugarCRM Inc. product ('Company') that Company is bound by
     * the SugarCRM Inc. Master Subscription Agreement (“MSA”), which is viewable at:
     * http://www.sugarcrm.com/master-subscription-agreement
     *
     * If Company is not bound by the MSA, then by installing or using this file
     * you are agreeing unconditionally that Company will be bound by the MSA and
     * certifying that you have authority to bind Company accordingly.
     *
     * Copyright  2004-2013 SugarCRM Inc.  All rights reserved.
     */
({fieldTag:'input:not(:disabled)',events:{'click .togglePasswordFields':'togglePasswordFields'},initialize:function(options){app.view.Field.prototype.initialize.call(this,options);app.error.errorName2Keys['confirm_password']='ERR_REENTER_PASSWORDS';this._extendModel();},_extendModel:function(){if(this.model&&!this.model._hasChangePasswordModifs){var _proto=_.clone(this.model);this.model._hasChangePasswordModifs=true;this.model._doValidatePasswordConfirmation=function(fields,errors,callback){var changePasswordFields=_.filter(fields,function(field){return field.type==='change-password'||field.type==='change-my-password';});_.each(changePasswordFields,function(field){var password=this.get(field.name+'_new_password'),confirmation=this.get(field.name+'_confirm_password');if(password!==confirmation){errors[field.name]=errors[field.name]||{};errors[field.name]['confirm_password']=true;}else if(!errors[field.name]){this.unset(field.name+'_current_password');if(password!==''){this.unset(field.name+'_new_password');this.unset(field.name+'_confirm_password');this.set(field.name,password);}}},this);callback(null,fields,errors);};this.model.addValidationTask('password_confirmation',_.bind(this.model._doValidatePasswordConfirmation,this.model));this.model.revertAttributes=function(options){var attrs=_.clone(this.attributes);_.each(attrs,function(value,attr){if(attr.match('_new_password')||attr.match('_confirm_password')){this.unset(attr);}},this);_proto.revertAttributes.call(this,options);};}},_render:function(){if(this.model){this.newPassword=this.model.get(this.name+'_new_password');this.confirmPassword=this.model.get(this.name+'_confirm_password');this.showPasswordFields=this.showPasswordFields||!this.format(this.value)||!!(this.newPassword||this.confirmPassword);}
app.view.Field.prototype._render.call(this);this.showPasswordFields=false;this.$inputs=this.$(this.fieldTag);this.focusIndex=0;return this;},format:function(value){if(value===true)return'value_setvalue_set';return value;},unformat:function(value){if(value==='value_setvalue_set')return true;return value;},bindDomChange:function(){if(!(this.model instanceof Backbone.Model))return;var self=this;var el=this.$(self.fieldTag);el.on("change",function(){self.model.set(self.name+'_'+$(this).attr('name'),self.unformat($(this).val()));});},focus:function(){if(!this.$inputs.length){this.togglePasswordFields();}
if(this.focusIndex<0){this.focusIndex=0;}
if(this.focusIndex>=this.$inputs.length){this.focusIndex=-1;return false;}else{this.$inputs[this.focusIndex].focus();this.focusIndex++;return true;}},togglePasswordFields:function(event){this.showPasswordFields=true;this.render();}})