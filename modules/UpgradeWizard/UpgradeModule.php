<?php
 if(!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point');
/*********************************************************************************
 * By installing or using this file, you are confirming on behalf of the entity
 * subscribed to the SugarCRM Inc. product ("Company") that Company is bound by
 * the SugarCRM Inc. Master Subscription Agreement (“MSA”), which is viewable at:
 * http://www.sugarcrm.com/master-subscription-agreement
 *
 * If Company is not bound by the MSA, then by installing or using this file
 * you are agreeing unconditionally that Company will be bound by the MSA and
 * certifying that you have authority to bind Company accordingly.
 *
 * Copyright (C) 2004-2013 SugarCRM Inc.  All rights reserved.
 ********************************************************************************/

if(empty($argv) || empty($argc) || $argc != 3) {
    die("Use UpgradeModule.php /path/to/sugar module");
}

$sapi_type = php_sapi_name();
if (substr($sapi_type, 0, 3) != 'cli') {
    die("UpgradeModule.php is CLI only.");
}

chdir($argv[1]);
define('ENTRY_POINT_TYPE', 'api');
if(!defined('sugarEntry'))define('sugarEntry', true);

require_once('include/entryPoint.php');
require_once 'ModuleInstall/ModuleInstaller.php';
require_once 'modules/UpgradeWizard/SidecarUpdate/SidecarMetaDataUpgrader.php';
require_once 'include/MetaDataManager/MetaDataManager.php';

function scriptErrorHandler($errno, $errstr, $errfile, $errline, $errcontext)
{
    $GLOBALS['log']->fatal("PHP: [$errno] $errstr in $errfile at $errline"."\n".var_export(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS), true));
}

class SidecarMetaDataUpgrader2 extends SidecarMetaDataUpgrader
{
    public function logUpgradeStatus($msg)
    {
        $GLOBALS['log']->info($msg);
    }
}

$GLOBALS['app_list_strings'] = return_app_list_strings_language($GLOBALS['current_language']);
$smdUpgrader = new SidecarMetaDataUpgrader2();
$module = $argv[2];
$smdUpgrader->setModule($module);
if(($bwcPos = array_search($module, $GLOBALS['bwcModules'])) !== false) {
    // remove it from BWC modules for now
    // if we succeed, it becomes permanent
    unset($GLOBALS['bwcModules']);
}
set_error_handler('scriptErrorHandler', E_ALL & ~E_STRICT & ~E_DEPRECATED);
$smdUpgrader->upgrade();
$fail = $smdUpgrader->getFailures();
if(!empty($fail)) {
    echo "***FAILURE***\n".join("\n", $fail)."\n";
    exit(1);
} else {
    if(count($smdUpgrader->getFilesForUpgrade()) > 0) {
        echo "\nSUCCESS!\nPlease check the result, and if you are satisfied, please delete these files:\n".join("\n", $smdUpgrader->getFilesForRemoval());
        echo "\n";
    } else {
        echo "\nNo files needed upgrade.\n";
    }
    // take module out of BWC
    if(file_exists("custom/Extension/application/Ext/Include/upgrade_bwc.php")) {
        $bwcModules = array();
        include 'custom/Extension/application/Ext/Include/upgrade_bwc.php';
        $bwcPos = array_search($module, $bwcModules);
        if($bwcPos !== false) {
            unset($bwcModules[$bwcPos]);
            // resave the file
            $data = "<?php \n/* This file was generated by Sugar Upgrade */\n";
            foreach($bwcModules as $bmodule) {
                $data .= '$bwcModules[] = \''.addslashes($bmodule)."';\n";
            }
            sugar_file_put_contents("custom/Extension/application/Ext/Include/upgrade_bwc.php", $data);
        }
    }
    // refresh caches
    $mi = new ModuleInstaller();
    $mi->silent = true;
    $mi->rebuild_extensions();
    SugarAutoLoader::buildCache();
    MetaDataManager::clearAPICache(true);
    exit(0);
}

